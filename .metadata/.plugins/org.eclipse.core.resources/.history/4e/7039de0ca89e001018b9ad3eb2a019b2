package com.jsp.jdbccrud;

import java.sql.Connection; // For creating a connection to the database
import java.sql.DriverManager; // For managing database drivers and connections
import java.sql.ResultSet; // For storing the result of a SELECT query
import java.sql.SQLException; // For handling SQL-related exceptions
import java.sql.Statement; // For executing SQL queries

public class personSelectOperation {

	public static void main(String[] args) {
		try {
			// STEP 1: Load PostgreSQL Driver
			// ClassNotFoundException will occur if the driver JAR file is not in classpath.
			Class.forName("org.postgresql.Driver");

			// STEP 2: Establish database connection
			// SQLException may occur if:
			// - Database server is not running
			// - Wrong URL, username, or password
			// - Database "personcrud" does not exist
			String url = "jdbc:postgresql://localhost:5432/personcrud";
			String user = "postgres";
			String password = "root";
			Connection con = DriverManager.getConnection(url, user, password);

			// STEP 3: Create a Statement object to execute SQL queries
			// SQLException may occur if connection is invalid or closed
			Statement st = con.createStatement();
			System.out.println(con); // Prints connection object (debugging purpose)

			// STEP 4: Write the SQL query
			String query = "SELECT * FROM person";

			// STEP 5: Execute the query
			// st.execute(query) returns true if query returns a ResultSet
			// SQLException may occur if:
			// - Table "person" does not exist
			// - SQL syntax is wrong
			st.execute(query);

			// STEP 6: Get the ResultSet (table data returned from query)
			// Will be null if query was not a SELECT
			ResultSet rs = st.getResultSet();

			// STEP 7: Move cursor to next row
			// rs.next() â†’ returns true if there is a row, false otherwise
			// This first rs.next() is only printing true/false for debugging
			// System.out.println(rs.next());   // will return true and move to the next line

			// STEP 8: Iterate over all rows in ResultSet
			// Note: The first rs.next() above already moved cursor once,
			// so this loop will skip the first row of data.
			// To fix: Remove the above System.out.println(rs.next());
			while (rs.next()) {
				// Retrieve values by column index
				// SQLException may occur if column index is invalid
				int id = rs.getInt(1); // First column (id)
				String name = rs.getString(2);// Second column (name)
				int age = rs.getInt(3); // Third column (age)

				// Print row data
				System.out.print("id : " + id + " name : " + name + " age " + age);
				System.out.println();
			}

			// STEP 9: Close the connection
			// Good practice to close connection (avoid memory leaks)
			con.close();

		} catch (ClassNotFoundException e) {
			// Exception: Driver class not found
			// Action: Print stack trace (developer debugging)
			e.printStackTrace();
		} catch (SQLException e) {
			// Exception: SQL related issue
			// Could be: invalid query, connection failure, wrong table name, invalid
			// column, etc.
			// Action: Print stack trace (developer debugging)
			e.printStackTrace();
		}
	}
}